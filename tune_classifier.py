# -*- coding: utf-8 -*-
"""tune classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ceVU3YzonQvNnDamPK4ojsb2Ci7O7xG7
"""

import torch
from torch.utils.data import DataLoader, Dataset, random_split
from torchvision import transforms
from PIL import Image
from transformers import ViTForImageClassification, ViTFeatureExtractor
import torch.optim as optim
from torch.optim.lr_scheduler import StepLR
import os

# Set device to GPU if available
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

num_epochs = 3

class LogoDataset(Dataset):
    def __init__(self, root, transform=None):
        self.transform = transform
        self.flawed_images = [(os.path.join(root, 'flawed_images', img), 1) for img in os.listdir(os.path.join(root, 'flawed_images'))]
        self.normal_images = [(os.path.join(root, 'original_images', img), 0) for img in os.listdir(os.path.join(root, 'original_images'))]
        self.images = self.flawed_images + self.normal_images

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        img_path, label = self.images[idx]
        image = Image.open(img_path).convert("RGB")

        if self.transform:
            image = self.transform(image)

        return image, label

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

dataset = LogoDataset("/content/detect-image-anomalies/data", transform=transform)

# Split dataset into training and validation sets (80/20 split)
train_size = int(0.8 * len(dataset))
val_size = len(dataset) - train_size
train_dataset, val_dataset = random_split(dataset, [train_size, val_size])

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=True)

# Load a pre-trained ViT model for image classification
model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224-in21k')
model.config.num_labels = 2  # Assuming binary classification (flawed and unflawed)
model.classifier = torch.nn.Linear(model.config.hidden_size, model.config.num_labels)

for name, param in model.named_parameters():
    if 'encoder.layer' in name:
        layer_num = int(name.split('.')[3])
        if layer_num < model.config.num_hidden_layers - 3:
            param.requires_grad = False

model.to(device)

# Feature extractor
feature_extractor = ViTFeatureExtractor.from_pretrained('google/vit-base-patch16-224-in21k')

# Set optimizer and learning rate scheduler
optimizer = optim.AdamW(model.parameters(), lr=1e-4)
criterion = torch.nn.CrossEntropyLoss()
lr_scheduler = StepLR(optimizer, step_size=3, gamma=0.1)

# Define training and validation functions
def train_one_epoch(model, optimizer, data_loader, device, epoch):
    model.train()
    total_loss = 0
    for images, labels in data_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images).logits
        loss = criterion(outputs, labels)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        total_loss += loss.item()

    avg_loss = total_loss / len(data_loader)
    print(f"Epoch {epoch}, Loss: {avg_loss}")

def evaluate(model, data_loader, device):
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for images, labels in data_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images).logits
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    accuracy = 100 * correct / total
    print(f'Validation Accuracy: {accuracy:.2f}%')

# Train the model
for epoch in range(num_epochs):
    train_one_epoch(model, optimizer, train_loader, device, epoch)
    lr_scheduler.step()
    evaluate(model, val_loader, device)

# Save the model
torch.save(model.state_dict(), 'vit_flaw_detection.pth')